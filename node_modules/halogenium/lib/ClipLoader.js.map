{"version":3,"sources":["../src/ClipLoader.jsx"],"names":["keyframes","transform","animationName","propTypes","loading","bool","color","string","size","oneOfType","number","verticalAlign","ptKeys","Object","keys","ClipLoader","getBallStyle","width","props","height","border","borderColor","borderBottomColor","borderRadius","background","getAnimationStyle","animation","join","animationFillMode","getStyle","i","display","klen","length","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;AAGA,IAAMA,YAAY;AAChB,QAAM;AACJC,eAAW;AADP,GADU;AAIhB,SAAO;AACLA,eAAW;AADN,GAJS;AAOhB,UAAQ;AACNA,eAAW;AADL;;AAKV;;;AAZkB,CAAlB,CAeA,IAAMC,gBAAgB,mCAAoBF,SAApB,CAAtB;;AAEA,IAAMG,YAAY;AAChBC,WAAS,oBAAUC,IADH;AAEhBC,SAAO,oBAAUC,MAFD;AAGhBC,QAAM,oBAAUC,SAAV,CAAoB,CAAE,oBAAUC,MAAZ,EAAoB,oBAAUH,MAA9B,CAApB,CAHU;AAIhBI,iBAAe,oBAAUF,SAAV,CAAoB,CAAE,oBAAUC,MAAZ,EAAoB,oBAAUH,MAA9B,CAApB;AAJC,CAAlB;;AAOA,IAAMK,SAASC,OAAOC,IAAP,CAAYX,SAAZ,CAAf;;IAEqBY,U;;;;;;;;;;;;;;8LASnBC,Y,GAAe;AAAA,aACb;AACEC,eAAO,MAAKC,KAAL,CAAWV,IADpB;AAEEW,gBAAQ,MAAKD,KAAL,CAAWV,IAFrB;AAGEY,gBAAQ,WAHV;AAIEC,qBAAa,MAAKH,KAAL,CAAWZ,KAJ1B;AAKEgB,2BAAmB,aALrB;AAMEC,sBAAc,MANhB;AAOEC,oBAAY,wBAPd;AAQEb,uBAAe,MAAKO,KAAL,CAAWP;AAR5B,OADa;AAAA,K,QAafc,iB,GAAoB,YAAM;AACxB,UAAMC,YAAY,CAAExB,aAAF,EAAiB,OAAjB,EAA0B,IAA1B,EAAgC,UAAhC,EAA4C,QAA5C,EAAuDyB,IAAvD,CAA4D,GAA5D,CAAlB;AACA,UAAMC,oBAAoB,MAA1B;;AAEA,aAAO;AACLF,4BADK;AAELE;AAFK,OAAP;AAID,K,QAMDC,Q,GAAW;AAAA,aACT,kCACE;AACET,gBAAQ,uBADV,CACmC;AADnC,OADF,EAIE,MAAKJ,YAAL,CAAkBc,CAAlB,CAJF,EAKE,MAAKL,iBAAL,EALF,EAME;AACEM,iBAAS;AADX,OANF,CADS;AAAA,K;;;AAJX;;;;;;;;6BAiBS;AAAA,UACC3B,OADD,GACa,KAAKc,KADlB,CACCd,OADD;;;AAGP,UAAIA,OAAJ,EAAa;AACX,YAAMc,qBAAa,KAAKA,KAAlB,CAAN;;AAEA,YAAIf,aAAaS,MAAjB,EAAyB;AACvB,cAAMoB,OAAOpB,OAAOqB,MAApB;AACA,eAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAIE,IAApB,EAA0BF,GAA1B,EAA+B;AAC7B,mBAAOZ,MAAMN,OAAOkB,CAAP,CAAN,CAAP;AACD;AACF;;AAED,eACE;AAAA;AAASZ,eAAT;AACE,iDAAK,OAAO,KAAKW,QAAL,EAAZ;AADF,SADF;AAKD;;AAED,aAAO,IAAP;AACD;;;;;;AAtEkBd,U,CACZZ,S,GAAYA,S;AADAY,U,CAGZmB,Y,GAAe;AACpB9B,WAAS,IADW;AAEpBE,SAAO,SAFa;AAGpBE,QAAM;AAHc,C;kBAHHO,U","file":"ClipLoader.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport assign from 'domkit/appendVendorPrefix'\nimport insertKeyframesRule from 'domkit/insertKeyframesRule'\n\n/**\n * @type {Object}\n */\nconst keyframes = {\n  '0%': {\n    transform: 'rotate(0deg) scale(1)',\n  },\n  '50%': {\n    transform: 'rotate(180deg) scale(0.8)',\n  },\n  '100%': {\n    transform: 'rotate(360deg) scale(1)',\n  },\n}\n\n/**\n * @type {String}\n */\nconst animationName = insertKeyframesRule(keyframes)\n\nconst propTypes = {\n  loading: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n  verticalAlign: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n}\n\nconst ptKeys = Object.keys(propTypes)\n\nexport default class ClipLoader extends Component {\n  static propTypes = propTypes;\n\n  static defaultProps = {\n    loading: true,\n    color: '#ffffff',\n    size: '35px',\n  }\n\n  getBallStyle = () => (\n    {\n      width: this.props.size,\n      height: this.props.size,\n      border: '2px solid',\n      borderColor: this.props.color,\n      borderBottomColor: 'transparent',\n      borderRadius: '100%',\n      background: 'transparent !important',\n      verticalAlign: this.props.verticalAlign,\n    }\n  )\n\n  getAnimationStyle = () => {\n    const animation = [ animationName, '0.75s', '0s', 'infinite', 'linear' ].join(' ')\n    const animationFillMode = 'both'\n\n    return {\n      animation,\n      animationFillMode,\n    }\n  }\n\n  /**\n   * @param  {Number} i\n   * @return {Object}\n   */\n  getStyle = i => (\n    assign(\n      {\n        border: '0px solid transparent', // fix firefox/chrome/opera rendering\n      },\n      this.getBallStyle(i),\n      this.getAnimationStyle(),\n      {\n        display: 'inline-block',\n      },\n    )\n  )\n\n  render() {\n    const { loading } = this.props\n\n    if (loading) {\n      const props = { ...this.props }\n\n      if (propTypes && ptKeys) {\n        const klen = ptKeys.length\n        for (let i = 0; i < klen; i++) {\n          delete props[ptKeys[i]]\n        }\n      }\n\n      return (\n        <div {...props}>\n          <div style={this.getStyle()} />\n        </div>\n      )\n    }\n\n    return null\n  }\n}\n"]}